2023/08/05 12:24:43 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:56:21) [GCC 10.3.0]
    CUDA available: True
    numpy_random_seed: 2100285401
    GPU 0: NVIDIA Tesla T4
    CUDA_HOME: None
    GCC: gcc (Debian 10.2.1-6) 10.2.1 20210110
    PyTorch: 1.10.1
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2
    OpenCV: 4.8.0
    MMEngine: 0.8.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2100285401
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/08/05 12:24:44 - mmengine - INFO - Config:
_file_client_args = dict(backend='disk')
_multiscale_resize_transforms = [
    dict(
        transforms=[
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                320,
                320,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    320,
                    320,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                960,
                960,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    960,
                    960,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
]
affine_scale = 0.5
albu_train_transforms = [
    dict(p=0.01, type='Blur'),
    dict(p=0.01, type='MedianBlur'),
    dict(p=0.01, type='ToGray'),
    dict(p=0.01, type='CLAHE'),
]
anchors = [
    [
        (
            68,
            69,
        ),
        (
            154,
            91,
        ),
        (
            143,
            162,
        ),
    ],
    [
        (
            242,
            160,
        ),
        (
            189,
            287,
        ),
        (
            391,
            207,
        ),
    ],
    [
        (
            353,
            337,
        ),
        (
            539,
            341,
        ),
        (
            443,
            432,
        ),
    ],
]
base_lr = 0.01
batch_shapes_cfg = dict(
    batch_size=1,
    extra_pad_ratio=0.5,
    img_size=640,
    size_divisor=32,
    type='BatchShapePolicy')
class_name = ('car', )
custom_hooks = [
    dict(
        ema_type='ExpMomentumEMA',
        momentum=0.0001,
        priority=49,
        strict_load=False,
        type='EMAHook',
        update_buffers=True),
]
data_root = '/home/openinnolab/work/current/mmyolo/data/image/dataset/'
dataset_type = 'YOLOv5CocoDataset'
deepen_factor = 0.33
default_hooks = dict(
    checkpoint=dict(
        interval=10, max_keep_ckpts=2, save_best='auto',
        type='CheckpointHook'),
    logger=dict(interval=5, type='LoggerHook'),
    param_scheduler=dict(
        lr_factor=0.01,
        max_epochs=40,
        scheduler_type='linear',
        type='YOLOv5ParamSchedulerHook',
        warmup_mim_iter=10),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='mmdet.DetVisualizationHook'))
default_scope = 'mmyolo'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
file_client_args = dict(backend='disk')
img_scale = (
    640,
    640,
)
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
loss_bbox_weight = 0.05
loss_cls_weight = 0.5
loss_obj_weight = 1.0
lr_factor = 0.01
max_epochs = 40
max_keep_ckpts = 3
metainfo = dict(
    classes=('car', ), palette=[
        (
            20,
            220,
            60,
        ),
    ])
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        deepen_factor=0.33,
        frozen_stages=4,
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        type='YOLOv5CSPDarknet',
        widen_factor=0.5),
    bbox_head=dict(
        head_module=dict(
            featmap_strides=[
                8,
                16,
                32,
            ],
            in_channels=[
                256,
                512,
                1024,
            ],
            num_base_priors=3,
            num_classes=1,
            type='YOLOv5HeadModule',
            widen_factor=0.5),
        loss_bbox=dict(
            bbox_format='xywh',
            eps=1e-07,
            iou_mode='ciou',
            loss_weight=0.05,
            reduction='mean',
            return_iou=True,
            type='IoULoss'),
        loss_cls=dict(
            loss_weight=0.5,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        loss_obj=dict(
            loss_weight=1.0,
            reduction='mean',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        obj_level_weights=[
            4.0,
            1.0,
            0.4,
        ],
        prior_generator=dict(
            base_sizes=[
                [
                    (
                        68,
                        69,
                    ),
                    (
                        154,
                        91,
                    ),
                    (
                        143,
                        162,
                    ),
                ],
                [
                    (
                        242,
                        160,
                    ),
                    (
                        189,
                        287,
                    ),
                    (
                        391,
                        207,
                    ),
                ],
                [
                    (
                        353,
                        337,
                    ),
                    (
                        539,
                        341,
                    ),
                    (
                        443,
                        432,
                    ),
                ],
            ],
            strides=[
                8,
                16,
                32,
            ],
            type='mmdet.YOLOAnchorGenerator'),
        prior_match_thr=4.0,
        type='YOLOv5Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0.0,
            0.0,
            0.0,
        ],
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='YOLOv5DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        deepen_factor=0.33,
        in_channels=[
            256,
            512,
            1024,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        num_csp_blocks=3,
        out_channels=[
            256,
            512,
            1024,
        ],
        type='YOLOv5PAFPN',
        widen_factor=0.5),
    test_cfg=dict(
        max_per_img=300,
        multi_label=True,
        nms=dict(iou_threshold=0.65, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    type='YOLODetector')
model_test_cfg = dict(
    max_per_img=300,
    multi_label=True,
    nms=dict(iou_threshold=0.65, type='nms'),
    nms_pre=30000,
    score_thr=0.001)
norm_cfg = dict(eps=0.001, momentum=0.03, type='BN')
num_classes = 1
num_det_layers = 3
obj_level_weights = [
    4.0,
    1.0,
    0.4,
]
optim_wrapper = dict(
    constructor='YOLOv5OptimizerConstructor',
    optimizer=dict(
        batch_size_per_gpu=12,
        lr=0.01,
        momentum=0.937,
        nesterov=True,
        type='SGD',
        weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = None
persistent_workers = True
pre_transform = [
    dict(file_client_args=dict(backend='disk'), type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
]
prior_match_thr = 4.0
resume = True
save_checkpoint_intervals = 10
strides = [
    8,
    16,
    32,
]
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/test.json',
        batch_shapes_cfg=dict(
            batch_size=1,
            extra_pad_ratio=0.5,
            img_size=640,
            size_divisor=32,
            type='BatchShapePolicy'),
        data_prefix=dict(img='images/'),
        data_root='/home/openinnolab/work/current/mmyolo/data/image/dataset/',
        metainfo=dict(classes=('car', ), palette=[
            (
                20,
                220,
                60,
            ),
        ]),
        pipeline=[
            dict(
                file_client_args=dict(backend='disk'),
                type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                ),
                type='mmdet.PackDetInputs'),
        ],
        test_mode=True,
        type='YOLOv5CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file=
    '/home/openinnolab/work/current/mmyolo/data/image/dataset/annotations/test.json',
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.CocoMetric')
test_pipeline = [
    dict(file_client_args=dict(backend='disk'), type='LoadImageFromFile'),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=False,
        pad_val=dict(img=114),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
            'pad_param',
        ),
        type='mmdet.PackDetInputs'),
]
train_ann_file = 'annotations/instances_train2017.json'
train_batch_size_per_gpu = 12
train_cfg = dict(max_epochs=40, type='EpochBasedTrainLoop', val_interval=10)
train_data_prefix = 'train2017/'
train_dataloader = dict(
    batch_size=12,
    collate_fn=dict(type='yolov5_collate'),
    dataset=dict(
        ann_file='annotations/trainval.json',
        data_prefix=dict(img='images/'),
        data_root='/home/openinnolab/work/current/mmyolo/data/image/dataset/',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        metainfo=dict(classes=('car', ), palette=[
            (
                20,
                220,
                60,
            ),
        ]),
        pipeline=[
            dict(
                file_client_args=dict(backend='disk'),
                type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                pre_transform=[
                    dict(
                        file_client_args=dict(backend='disk'),
                        type='LoadImageFromFile'),
                    dict(type='LoadAnnotations', with_bbox=True),
                ],
                type='Mosaic'),
            dict(
                border=(
                    -320,
                    -320,
                ),
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                scaling_ratio_range=(
                    0.5,
                    1.5,
                ),
                type='YOLOv5RandomAffine'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='YOLOv5CocoDataset'),
    num_workers=4,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 4
train_pipeline = [
    dict(file_client_args=dict(backend='disk'), type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        pre_transform=[
            dict(
                file_client_args=dict(backend='disk'),
                type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
        ],
        type='Mosaic'),
    dict(
        border=(
            -320,
            -320,
        ),
        border_val=(
            114,
            114,
            114,
        ),
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        scaling_ratio_range=(
            0.5,
            1.5,
        ),
        type='YOLOv5RandomAffine'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=300, nms=dict(iou_threshold=0.65, type='nms')),
    type='mmdet.DetTTAModel')
tta_pipeline = [
    dict(file_client_args=dict(backend='disk'), type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(
                    transforms=[
                        dict(scale=(
                            640,
                            640,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                640,
                                640,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            320,
                            320,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                320,
                                320,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            960,
                            960,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                960,
                                960,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
            ],
            [
                dict(prob=1.0, type='mmdet.RandomFlip'),
                dict(prob=0.0, type='mmdet.RandomFlip'),
            ],
            [
                dict(type='mmdet.LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'pad_param',
                        'flip',
                        'flip_direction',
                    ),
                    type='mmdet.PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_ann_file = 'annotations/instances_val2017.json'
val_batch_size_per_gpu = 1
val_cfg = dict(type='ValLoop')
val_data_prefix = 'val2017/'
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/test.json',
        batch_shapes_cfg=dict(
            batch_size=1,
            extra_pad_ratio=0.5,
            img_size=640,
            size_divisor=32,
            type='BatchShapePolicy'),
        data_prefix=dict(img='images/'),
        data_root='/home/openinnolab/work/current/mmyolo/data/image/dataset/',
        metainfo=dict(classes=('car', ), palette=[
            (
                20,
                220,
                60,
            ),
        ]),
        pipeline=[
            dict(
                file_client_args=dict(backend='disk'),
                type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                ),
                type='mmdet.PackDetInputs'),
        ],
        test_mode=True,
        type='YOLOv5CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file=
    '/home/openinnolab/work/current/mmyolo/data/image/dataset/annotations/test.json',
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.CocoMetric')
val_num_workers = 2
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='mmdet.DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
weight_decay = 0.0005
widen_factor = 0.5
work_dir = './work_dirs/yolov5_s-v61_fast_1xb12-40e_image'

2023/08/05 12:24:49 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/08/05 12:24:49 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/08/05 12:24:50 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/08/05 12:24:50 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/08/05 12:24:50 - mmengine - INFO - Scaled weight_decay to 0.00046875
2023/08/05 12:24:50 - mmengine - INFO - Optimizer groups: 60 .bias, 60 conv.weight, 57 other
Name of parameter - Initialization information

backbone.stem.conv.weight - torch.Size([32, 3, 6, 6]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stem.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stem.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.0.conv.weight - torch.Size([64, 32, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage1.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.main_conv.conv.weight - torch.Size([32, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage1.1.main_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.main_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.short_conv.conv.weight - torch.Size([32, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage1.1.short_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.short_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.final_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage1.1.final_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.final_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([32, 32, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.conv.weight - torch.Size([32, 32, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage1.1.blocks.0.conv2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.0.conv.weight - torch.Size([128, 64, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.main_conv.conv.weight - torch.Size([64, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.short_conv.conv.weight - torch.Size([64, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.short_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.short_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.final_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.blocks.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.blocks.1.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage2.1.blocks.1.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.0.conv.weight - torch.Size([256, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.main_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.short_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage3.1.blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.0.conv.weight - torch.Size([512, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.main_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.1.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.short_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.1.short_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.short_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.1.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.1.blocks.0.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.1.blocks.0.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.2.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv2.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5CSPDarknet  

backbone.stage4.2.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.reduce_layers.2.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.reduce_layers.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.reduce_layers.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.main_conv.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.0.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.short_conv.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.0.0.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.0.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.0.0.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.0.0.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.0.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.1.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.main_conv.conv.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.short_conv.conv.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.1.short_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.short_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.final_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.1.blocks.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.top_down_layers.1.blocks.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.0.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.downsample_layers.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.downsample_layers.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.main_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.short_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.0.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.0.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.0.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.main_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.1.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.short_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.1.short_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.short_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.1.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv1.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.1.blocks.0.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv5PAFPN  

neck.bottom_up_layers.1.blocks.0.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.convs_pred.0.weight - torch.Size([18, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.convs_pred.0.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in YOLOv5HeadModule  

bbox_head.head_module.convs_pred.1.weight - torch.Size([18, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.convs_pred.1.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in YOLOv5HeadModule  

bbox_head.head_module.convs_pred.2.weight - torch.Size([18, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.convs_pred.2.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in YOLOv5HeadModule  
2023/08/05 12:24:51 - mmengine - INFO - Auto resumed from the latest checkpoint /home/openinnolab/work/current/work_dirs/yolov5_s-v61_fast_1xb12-40e_image/epoch_30.pth.
2023/08/05 12:24:52 - mmengine - INFO - Load checkpoint from /home/openinnolab/work/current/work_dirs/yolov5_s-v61_fast_1xb12-40e_image/epoch_30.pth
2023/08/05 12:24:52 - mmengine - WARNING - `resume_param_scheduler` is True but `self.param_schedulers` is None, so skip resuming parameter schedulers
2023/08/05 12:24:52 - mmengine - INFO - resumed epoch: 30, iter: 1320
2023/08/05 12:24:52 - mmengine - INFO - Checkpoints will be saved to /home/openinnolab/work/current/work_dirs/yolov5_s-v61_fast_1xb12-40e_image.
2023/08/05 12:25:11 - mmengine - INFO - Epoch(train) [31][ 5/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:28:20  time: 2.0821  data_time: 1.6184  memory: 2744  loss: 0.3080  loss_cls: 0.0000  loss_obj: 0.0408  loss_bbox: 0.2672
2023/08/05 12:25:20 - mmengine - INFO - Epoch(train) [31][10/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:20:05  time: 2.0769  data_time: 1.6045  memory: 1219  loss: 0.3207  loss_cls: 0.0000  loss_obj: 0.0436  loss_bbox: 0.2772
2023/08/05 12:25:29 - mmengine - INFO - Epoch(train) [31][15/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:17:43  time: 1.9789  data_time: 1.5065  memory: 1219  loss: 0.3266  loss_cls: 0.0000  loss_obj: 0.0443  loss_bbox: 0.2822
2023/08/05 12:25:37 - mmengine - INFO - Epoch(train) [31][20/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:15:58  time: 1.9709  data_time: 1.5026  memory: 1219  loss: 0.3189  loss_cls: 0.0000  loss_obj: 0.0431  loss_bbox: 0.2758
2023/08/05 12:25:50 - mmengine - INFO - Epoch(train) [31][25/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:16:14  time: 2.0669  data_time: 1.5991  memory: 1219  loss: 0.3250  loss_cls: 0.0000  loss_obj: 0.0432  loss_bbox: 0.2818
2023/08/05 12:26:00 - mmengine - INFO - Epoch(train) [31][30/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:15:33  time: 2.0989  data_time: 1.6334  memory: 1219  loss: 0.3161  loss_cls: 0.0000  loss_obj: 0.0415  loss_bbox: 0.2746
2023/08/05 12:26:08 - mmengine - INFO - Epoch(train) [31][35/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:14:46  time: 1.9889  data_time: 1.5200  memory: 1219  loss: 0.3179  loss_cls: 0.0000  loss_obj: 0.0412  loss_bbox: 0.2767
2023/08/05 12:26:16 - mmengine - INFO - Epoch(train) [31][40/44]  base_lr: 1.0000e-02 lr: 2.8225e-03  eta: 0:14:07  time: 1.9789  data_time: 1.5118  memory: 1219  loss: 0.3158  loss_cls: 0.0000  loss_obj: 0.0409  loss_bbox: 0.2749
2023/08/05 12:26:23 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:26:39 - mmengine - INFO - Epoch(train) [32][ 5/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:14:14  time: 2.1418  data_time: 1.6436  memory: 2625  loss: 0.3123  loss_cls: 0.0000  loss_obj: 0.0405  loss_bbox: 0.2719
2023/08/05 12:26:47 - mmengine - INFO - Epoch(train) [32][10/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:13:43  time: 1.9359  data_time: 1.5669  memory: 1219  loss: 0.3183  loss_cls: 0.0000  loss_obj: 0.0422  loss_bbox: 0.2761
2023/08/05 12:26:55 - mmengine - INFO - Epoch(train) [32][15/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:13:16  time: 1.9137  data_time: 1.5436  memory: 1219  loss: 0.3233  loss_cls: 0.0000  loss_obj: 0.0437  loss_bbox: 0.2796
2023/08/05 12:27:03 - mmengine - INFO - Epoch(train) [32][20/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:12:52  time: 1.8839  data_time: 1.5114  memory: 1219  loss: 0.3244  loss_cls: 0.0000  loss_obj: 0.0452  loss_bbox: 0.2792
2023/08/05 12:27:17 - mmengine - INFO - Epoch(train) [32][25/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:13:01  time: 2.0019  data_time: 1.6274  memory: 1219  loss: 0.3182  loss_cls: 0.0000  loss_obj: 0.0431  loss_bbox: 0.2751
2023/08/05 12:27:25 - mmengine - INFO - Epoch(train) [32][30/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:12:38  time: 2.0039  data_time: 1.6257  memory: 1219  loss: 0.3213  loss_cls: 0.0000  loss_obj: 0.0446  loss_bbox: 0.2767
2023/08/05 12:27:34 - mmengine - INFO - Epoch(train) [32][35/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:12:22  time: 1.9080  data_time: 1.5312  memory: 1219  loss: 0.3165  loss_cls: 0.0000  loss_obj: 0.0434  loss_bbox: 0.2732
2023/08/05 12:27:42 - mmengine - INFO - Epoch(train) [32][40/44]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 0:12:02  time: 1.8839  data_time: 1.5107  memory: 1219  loss: 0.3155  loss_cls: 0.0000  loss_obj: 0.0436  loss_bbox: 0.2719
2023/08/05 12:27:47 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:28:02 - mmengine - INFO - Epoch(train) [33][ 5/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:11:51  time: 2.0152  data_time: 1.6471  memory: 1219  loss: 0.2997  loss_cls: 0.0000  loss_obj: 0.0434  loss_bbox: 0.2563
2023/08/05 12:28:11 - mmengine - INFO - Epoch(train) [33][10/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:11:34  time: 1.9639  data_time: 1.6223  memory: 1219  loss: 0.3054  loss_cls: 0.0000  loss_obj: 0.0455  loss_bbox: 0.2599
2023/08/05 12:28:19 - mmengine - INFO - Epoch(train) [33][15/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:11:17  time: 1.8439  data_time: 1.5084  memory: 1219  loss: 0.3043  loss_cls: 0.0000  loss_obj: 0.0454  loss_bbox: 0.2589
2023/08/05 12:28:27 - mmengine - INFO - Epoch(train) [33][20/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:11:02  time: 1.8479  data_time: 1.5163  memory: 1219  loss: 0.2940  loss_cls: 0.0000  loss_obj: 0.0418  loss_bbox: 0.2522
2023/08/05 12:28:42 - mmengine - INFO - Epoch(train) [33][25/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:11:05  time: 1.9759  data_time: 1.6442  memory: 1219  loss: 0.2922  loss_cls: 0.0000  loss_obj: 0.0410  loss_bbox: 0.2512
2023/08/05 12:28:50 - mmengine - INFO - Epoch(train) [33][30/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:10:49  time: 1.9859  data_time: 1.6500  memory: 1219  loss: 0.2961  loss_cls: 0.0000  loss_obj: 0.0435  loss_bbox: 0.2526
2023/08/05 12:28:58 - mmengine - INFO - Epoch(train) [33][35/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:10:33  time: 1.8577  data_time: 1.5236  memory: 1219  loss: 0.2854  loss_cls: 0.0000  loss_obj: 0.0420  loss_bbox: 0.2434
2023/08/05 12:29:06 - mmengine - INFO - Epoch(train) [33][40/44]  base_lr: 1.0000e-02 lr: 2.3275e-03  eta: 0:10:19  time: 1.8658  data_time: 1.5275  memory: 1219  loss: 0.2809  loss_cls: 0.0000  loss_obj: 0.0414  loss_bbox: 0.2395
2023/08/05 12:29:11 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:29:27 - mmengine - INFO - Epoch(train) [34][ 5/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:10:08  time: 1.9968  data_time: 1.6563  memory: 1219  loss: 0.2883  loss_cls: 0.0000  loss_obj: 0.0423  loss_bbox: 0.2460
2023/08/05 12:29:35 - mmengine - INFO - Epoch(train) [34][10/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:09:54  time: 1.9839  data_time: 1.6362  memory: 1219  loss: 0.2887  loss_cls: 0.0000  loss_obj: 0.0404  loss_bbox: 0.2483
2023/08/05 12:29:44 - mmengine - INFO - Epoch(train) [34][15/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:09:42  time: 1.8679  data_time: 1.5185  memory: 1219  loss: 0.2964  loss_cls: 0.0000  loss_obj: 0.0395  loss_bbox: 0.2569
2023/08/05 12:29:52 - mmengine - INFO - Epoch(train) [34][20/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:09:29  time: 1.8739  data_time: 1.5184  memory: 1219  loss: 0.2950  loss_cls: 0.0000  loss_obj: 0.0384  loss_bbox: 0.2567
2023/08/05 12:30:06 - mmengine - INFO - Epoch(train) [34][25/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:09:25  time: 1.9760  data_time: 1.6220  memory: 1219  loss: 0.2947  loss_cls: 0.0000  loss_obj: 0.0379  loss_bbox: 0.2568
2023/08/05 12:30:14 - mmengine - INFO - Epoch(train) [34][30/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:09:12  time: 1.9799  data_time: 1.6256  memory: 1219  loss: 0.2980  loss_cls: 0.0000  loss_obj: 0.0392  loss_bbox: 0.2588
2023/08/05 12:30:23 - mmengine - INFO - Epoch(train) [34][35/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:09:00  time: 1.8639  data_time: 1.5117  memory: 1219  loss: 0.3032  loss_cls: 0.0000  loss_obj: 0.0387  loss_bbox: 0.2645
2023/08/05 12:30:31 - mmengine - INFO - Epoch(train) [34][40/44]  base_lr: 1.0000e-02 lr: 2.0800e-03  eta: 0:08:47  time: 1.8640  data_time: 1.5155  memory: 1219  loss: 0.3075  loss_cls: 0.0000  loss_obj: 0.0387  loss_bbox: 0.2689
2023/08/05 12:30:36 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:30:51 - mmengine - INFO - Epoch(train) [35][ 5/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:08:34  time: 2.0026  data_time: 1.6589  memory: 1219  loss: 0.3050  loss_cls: 0.0000  loss_obj: 0.0409  loss_bbox: 0.2641
2023/08/05 12:30:59 - mmengine - INFO - Epoch(train) [35][10/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:08:21  time: 1.9800  data_time: 1.6379  memory: 1219  loss: 0.3005  loss_cls: 0.0000  loss_obj: 0.0396  loss_bbox: 0.2609
2023/08/05 12:31:08 - mmengine - INFO - Epoch(train) [35][15/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:08:10  time: 1.8639  data_time: 1.5281  memory: 1219  loss: 0.3066  loss_cls: 0.0000  loss_obj: 0.0427  loss_bbox: 0.2639
2023/08/05 12:31:16 - mmengine - INFO - Epoch(train) [35][20/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:07:58  time: 1.8640  data_time: 1.5303  memory: 1219  loss: 0.3016  loss_cls: 0.0000  loss_obj: 0.0431  loss_bbox: 0.2585
2023/08/05 12:31:30 - mmengine - INFO - Epoch(train) [35][25/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:07:53  time: 1.9698  data_time: 1.6382  memory: 1219  loss: 0.3120  loss_cls: 0.0000  loss_obj: 0.0455  loss_bbox: 0.2665
2023/08/05 12:31:38 - mmengine - INFO - Epoch(train) [35][30/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:07:41  time: 1.9679  data_time: 1.6362  memory: 1219  loss: 0.3116  loss_cls: 0.0000  loss_obj: 0.0457  loss_bbox: 0.2659
2023/08/05 12:31:47 - mmengine - INFO - Epoch(train) [35][35/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:07:30  time: 1.8702  data_time: 1.5428  memory: 1219  loss: 0.3057  loss_cls: 0.0000  loss_obj: 0.0449  loss_bbox: 0.2608
2023/08/05 12:31:55 - mmengine - INFO - Epoch(train) [35][40/44]  base_lr: 1.0000e-02 lr: 1.8325e-03  eta: 0:07:19  time: 1.8758  data_time: 1.5485  memory: 1219  loss: 0.3093  loss_cls: 0.0000  loss_obj: 0.0459  loss_bbox: 0.2634
2023/08/05 12:32:00 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:32:15 - mmengine - INFO - Epoch(train) [36][ 5/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:07:03  time: 1.9871  data_time: 1.6648  memory: 1219  loss: 0.3017  loss_cls: 0.0000  loss_obj: 0.0469  loss_bbox: 0.2549
2023/08/05 12:32:24 - mmengine - INFO - Epoch(train) [36][10/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:06:52  time: 1.9799  data_time: 1.6477  memory: 1219  loss: 0.3073  loss_cls: 0.0000  loss_obj: 0.0450  loss_bbox: 0.2623
2023/08/05 12:32:32 - mmengine - INFO - Epoch(train) [36][15/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:06:41  time: 1.8519  data_time: 1.5216  memory: 1219  loss: 0.3020  loss_cls: 0.0000  loss_obj: 0.0445  loss_bbox: 0.2574
2023/08/05 12:32:40 - mmengine - INFO - Epoch(train) [36][20/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:06:30  time: 1.8559  data_time: 1.5255  memory: 1219  loss: 0.2960  loss_cls: 0.0000  loss_obj: 0.0433  loss_bbox: 0.2528
2023/08/05 12:32:54 - mmengine - INFO - Epoch(train) [36][25/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:06:23  time: 1.9520  data_time: 1.6255  memory: 1219  loss: 0.2899  loss_cls: 0.0000  loss_obj: 0.0416  loss_bbox: 0.2483
2023/08/05 12:33:02 - mmengine - INFO - Epoch(train) [36][30/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:06:12  time: 1.9620  data_time: 1.6371  memory: 1219  loss: 0.2824  loss_cls: 0.0000  loss_obj: 0.0415  loss_bbox: 0.2409
2023/08/05 12:33:11 - mmengine - INFO - Epoch(train) [36][35/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:06:02  time: 1.8599  data_time: 1.5373  memory: 1219  loss: 0.2803  loss_cls: 0.0000  loss_obj: 0.0413  loss_bbox: 0.2389
2023/08/05 12:33:19 - mmengine - INFO - Epoch(train) [36][40/44]  base_lr: 1.0000e-02 lr: 1.5850e-03  eta: 0:05:51  time: 1.8639  data_time: 1.5354  memory: 1219  loss: 0.2873  loss_cls: 0.0000  loss_obj: 0.0434  loss_bbox: 0.2440
2023/08/05 12:33:24 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:33:39 - mmengine - INFO - Epoch(train) [37][ 5/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:05:35  time: 1.9878  data_time: 1.6642  memory: 1219  loss: 0.2722  loss_cls: 0.0000  loss_obj: 0.0402  loss_bbox: 0.2321
2023/08/05 12:33:47 - mmengine - INFO - Epoch(train) [37][10/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:05:24  time: 1.9739  data_time: 1.6437  memory: 1219  loss: 0.2763  loss_cls: 0.0000  loss_obj: 0.0395  loss_bbox: 0.2368
2023/08/05 12:33:56 - mmengine - INFO - Epoch(train) [37][15/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:05:13  time: 1.8500  data_time: 1.5211  memory: 1219  loss: 0.2727  loss_cls: 0.0000  loss_obj: 0.0398  loss_bbox: 0.2329
2023/08/05 12:34:04 - mmengine - INFO - Epoch(train) [37][20/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:05:03  time: 1.8477  data_time: 1.5164  memory: 1219  loss: 0.2743  loss_cls: 0.0000  loss_obj: 0.0411  loss_bbox: 0.2331
2023/08/05 12:34:18 - mmengine - INFO - Epoch(train) [37][25/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:04:55  time: 1.9718  data_time: 1.6365  memory: 1219  loss: 0.2809  loss_cls: 0.0000  loss_obj: 0.0426  loss_bbox: 0.2383
2023/08/05 12:34:26 - mmengine - INFO - Epoch(train) [37][30/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:04:45  time: 1.9720  data_time: 1.6323  memory: 1219  loss: 0.2848  loss_cls: 0.0000  loss_obj: 0.0434  loss_bbox: 0.2413
2023/08/05 12:34:34 - mmengine - INFO - Epoch(train) [37][35/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:04:34  time: 1.8599  data_time: 1.5186  memory: 1219  loss: 0.2860  loss_cls: 0.0000  loss_obj: 0.0428  loss_bbox: 0.2432
2023/08/05 12:34:42 - mmengine - INFO - Epoch(train) [37][40/44]  base_lr: 1.0000e-02 lr: 1.3375e-03  eta: 0:04:24  time: 1.8400  data_time: 1.5025  memory: 1219  loss: 0.2835  loss_cls: 0.0000  loss_obj: 0.0429  loss_bbox: 0.2405
2023/08/05 12:34:48 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:35:03 - mmengine - INFO - Epoch(train) [38][ 5/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:04:08  time: 1.9885  data_time: 1.6597  memory: 1219  loss: 0.2759  loss_cls: 0.0000  loss_obj: 0.0404  loss_bbox: 0.2355
2023/08/05 12:35:12 - mmengine - INFO - Epoch(train) [38][10/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:03:57  time: 1.9759  data_time: 1.6405  memory: 1219  loss: 0.2816  loss_cls: 0.0000  loss_obj: 0.0421  loss_bbox: 0.2396
2023/08/05 12:35:19 - mmengine - INFO - Epoch(train) [38][15/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:03:47  time: 1.8459  data_time: 1.5149  memory: 1219  loss: 0.2812  loss_cls: 0.0000  loss_obj: 0.0418  loss_bbox: 0.2395
2023/08/05 12:35:28 - mmengine - INFO - Epoch(train) [38][20/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:03:37  time: 1.8497  data_time: 1.5173  memory: 1219  loss: 0.2843  loss_cls: 0.0000  loss_obj: 0.0416  loss_bbox: 0.2426
2023/08/05 12:35:41 - mmengine - INFO - Epoch(train) [38][25/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:03:28  time: 1.9578  data_time: 1.6276  memory: 1219  loss: 0.2875  loss_cls: 0.0000  loss_obj: 0.0416  loss_bbox: 0.2459
2023/08/05 12:35:50 - mmengine - INFO - Epoch(train) [38][30/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:03:18  time: 1.9739  data_time: 1.6441  memory: 1219  loss: 0.2822  loss_cls: 0.0000  loss_obj: 0.0405  loss_bbox: 0.2416
2023/08/05 12:35:58 - mmengine - INFO - Epoch(train) [38][35/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:03:08  time: 1.8499  data_time: 1.5204  memory: 1219  loss: 0.2846  loss_cls: 0.0000  loss_obj: 0.0404  loss_bbox: 0.2442
2023/08/05 12:36:07 - mmengine - INFO - Epoch(train) [38][40/44]  base_lr: 1.0000e-02 lr: 1.0900e-03  eta: 0:02:58  time: 1.8579  data_time: 1.5262  memory: 1219  loss: 0.2837  loss_cls: 0.0000  loss_obj: 0.0399  loss_bbox: 0.2438
2023/08/05 12:36:11 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:36:27 - mmengine - INFO - Epoch(train) [39][ 5/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:02:41  time: 1.9932  data_time: 1.6563  memory: 1219  loss: 0.2881  loss_cls: 0.0000  loss_obj: 0.0397  loss_bbox: 0.2484
2023/08/05 12:36:35 - mmengine - INFO - Epoch(train) [39][10/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:02:31  time: 1.9778  data_time: 1.6285  memory: 1219  loss: 0.2994  loss_cls: 0.0000  loss_obj: 0.0416  loss_bbox: 0.2578
2023/08/05 12:36:43 - mmengine - INFO - Epoch(train) [39][15/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:02:21  time: 1.8541  data_time: 1.5064  memory: 1219  loss: 0.3012  loss_cls: 0.0000  loss_obj: 0.0423  loss_bbox: 0.2589
2023/08/05 12:36:51 - mmengine - INFO - Epoch(train) [39][20/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:02:11  time: 1.8457  data_time: 1.4964  memory: 1219  loss: 0.2952  loss_cls: 0.0000  loss_obj: 0.0414  loss_bbox: 0.2537
2023/08/05 12:37:06 - mmengine - INFO - Epoch(train) [39][25/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:02:02  time: 1.9778  data_time: 1.6263  memory: 1219  loss: 0.2937  loss_cls: 0.0000  loss_obj: 0.0411  loss_bbox: 0.2526
2023/08/05 12:37:14 - mmengine - INFO - Epoch(train) [39][30/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:01:52  time: 1.9740  data_time: 1.6244  memory: 1219  loss: 0.2879  loss_cls: 0.0000  loss_obj: 0.0404  loss_bbox: 0.2475
2023/08/05 12:37:22 - mmengine - INFO - Epoch(train) [39][35/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:01:42  time: 1.8600  data_time: 1.5179  memory: 1219  loss: 0.2824  loss_cls: 0.0000  loss_obj: 0.0403  loss_bbox: 0.2421
2023/08/05 12:37:30 - mmengine - INFO - Epoch(train) [39][40/44]  base_lr: 1.0000e-02 lr: 8.4250e-04  eta: 0:01:32  time: 1.8439  data_time: 1.5014  memory: 1219  loss: 0.2840  loss_cls: 0.0000  loss_obj: 0.0400  loss_bbox: 0.2440
2023/08/05 12:37:35 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:37:51 - mmengine - INFO - Epoch(train) [40][ 5/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:01:15  time: 1.9915  data_time: 1.6562  memory: 1219  loss: 0.2823  loss_cls: 0.0000  loss_obj: 0.0418  loss_bbox: 0.2405
2023/08/05 12:37:59 - mmengine - INFO - Epoch(train) [40][10/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:01:05  time: 1.9699  data_time: 1.6320  memory: 1219  loss: 0.2856  loss_cls: 0.0000  loss_obj: 0.0431  loss_bbox: 0.2426
2023/08/05 12:38:07 - mmengine - INFO - Epoch(train) [40][15/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:00:56  time: 1.8440  data_time: 1.5195  memory: 1219  loss: 0.2752  loss_cls: 0.0000  loss_obj: 0.0416  loss_bbox: 0.2336
2023/08/05 12:38:15 - mmengine - INFO - Epoch(train) [40][20/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:00:46  time: 1.8396  data_time: 1.5231  memory: 1219  loss: 0.2687  loss_cls: 0.0000  loss_obj: 0.0409  loss_bbox: 0.2277
2023/08/05 12:38:29 - mmengine - INFO - Epoch(train) [40][25/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:00:36  time: 1.9598  data_time: 1.6340  memory: 1219  loss: 0.2750  loss_cls: 0.0000  loss_obj: 0.0430  loss_bbox: 0.2320
2023/08/05 12:38:37 - mmengine - INFO - Epoch(train) [40][30/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:00:27  time: 1.9579  data_time: 1.6284  memory: 1219  loss: 0.2794  loss_cls: 0.0000  loss_obj: 0.0425  loss_bbox: 0.2369
2023/08/05 12:38:47 - mmengine - INFO - Epoch(train) [40][35/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:00:17  time: 1.8717  data_time: 1.5363  memory: 1219  loss: 0.2824  loss_cls: 0.0000  loss_obj: 0.0443  loss_bbox: 0.2381
2023/08/05 12:38:55 - mmengine - INFO - Epoch(train) [40][40/44]  base_lr: 1.0000e-02 lr: 5.9500e-04  eta: 0:00:07  time: 1.8719  data_time: 1.5343  memory: 1219  loss: 0.2859  loss_cls: 0.0000  loss_obj: 0.0440  loss_bbox: 0.2419
2023/08/05 12:38:59 - mmengine - INFO - Exp name: yolov5_s-v61_fast_1xb12-40e_image_20230805_122442
2023/08/05 12:38:59 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/08/05 12:39:00 - mmengine - WARNING - `save_param_scheduler` is True but `self.param_schedulers` is None, so skip saving parameter schedulers
2023/08/05 12:39:02 - mmengine - INFO - Epoch(val) [40][ 5/66]    eta: 0:00:09  time: 0.0777  data_time: 0.0178  memory: 2207  
2023/08/05 12:39:02 - mmengine - INFO - Epoch(val) [40][10/66]    eta: 0:00:06  time: 0.0764  data_time: 0.0189  memory: 116  
2023/08/05 12:39:02 - mmengine - INFO - Epoch(val) [40][15/66]    eta: 0:00:04  time: 0.0746  data_time: 0.0205  memory: 116  
2023/08/05 12:39:03 - mmengine - INFO - Epoch(val) [40][20/66]    eta: 0:00:03  time: 0.0745  data_time: 0.0233  memory: 116  
2023/08/05 12:39:03 - mmengine - INFO - Epoch(val) [40][25/66]    eta: 0:00:03  time: 0.0740  data_time: 0.0257  memory: 116  
2023/08/05 12:39:03 - mmengine - INFO - Epoch(val) [40][30/66]    eta: 0:00:02  time: 0.0727  data_time: 0.0278  memory: 116  
2023/08/05 12:39:03 - mmengine - INFO - Epoch(val) [40][35/66]    eta: 0:00:02  time: 0.0722  data_time: 0.0299  memory: 116  
2023/08/05 12:39:04 - mmengine - INFO - Epoch(val) [40][40/66]    eta: 0:00:01  time: 0.0725  data_time: 0.0306  memory: 116  
2023/08/05 12:39:04 - mmengine - INFO - Epoch(val) [40][45/66]    eta: 0:00:01  time: 0.0708  data_time: 0.0309  memory: 116  
2023/08/05 12:39:04 - mmengine - INFO - Epoch(val) [40][50/66]    eta: 0:00:01  time: 0.0735  data_time: 0.0328  memory: 116  
2023/08/05 12:39:05 - mmengine - INFO - Epoch(val) [40][55/66]    eta: 0:00:00  time: 0.0644  data_time: 0.0309  memory: 116  
2023/08/05 12:39:05 - mmengine - INFO - Epoch(val) [40][60/66]    eta: 0:00:00  time: 0.0659  data_time: 0.0306  memory: 116  
2023/08/05 12:39:06 - mmengine - INFO - Epoch(val) [40][65/66]    eta: 0:00:00  time: 0.0676  data_time: 0.0295  memory: 116  
2023/08/05 12:39:06 - mmengine - INFO - Evaluating bbox...
2023/08/05 12:39:06 - mmengine - INFO - bbox_mAP_copypaste: 0.431 0.790 0.447 0.000 0.432 0.635
2023/08/05 12:39:06 - mmengine - INFO - Epoch(val) [40][66/66]    coco/bbox_mAP: 0.4310  coco/bbox_mAP_50: 0.7900  coco/bbox_mAP_75: 0.4470  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4320  coco/bbox_mAP_l: 0.6350  data_time: 0.0311  time: 0.0709
2023/08/05 12:39:06 - mmengine - INFO - The previous best checkpoint /home/openinnolab/work/current/work_dirs/yolov5_s-v61_fast_1xb12-40e_image/best_coco_bbox_mAP_epoch_30.pth is removed
2023/08/05 12:39:07 - mmengine - INFO - The best checkpoint with 0.4310 coco/bbox_mAP at 40 epoch is saved to best_coco_bbox_mAP_epoch_40.pth.
